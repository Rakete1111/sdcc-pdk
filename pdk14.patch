Index: Makefile.common.in
===================================================================
--- Makefile.common.in	(revision 10872)
+++ Makefile.common.in	(working copy)
@@ -57,6 +57,7 @@
 OPT_DISABLE_TLCS90      = @OPT_DISABLE_TLCS90@
 OPT_DISABLE_GBZ80       = @OPT_DISABLE_GBZ80@
 OPT_DISABLE_STM8        = @OPT_DISABLE_STM8@
+OPT_DISABLE_PDK14       = @OPT_DISABLE_PDK14@
 
 OPT_ENABLE_DOC          = @OPT_ENABLE_DOC@
 
Index: Makefile.in
===================================================================
--- Makefile.in	(revision 10872)
+++ Makefile.in	(working copy)
@@ -65,6 +65,11 @@
 SDCC_LD        += sdcc-ldgb
 endif
 
+ifeq ($(OPT_DISABLE_PDK14), 0)
+SDCC_AS        += sdas/aspdk
+SDCC_LD        += sdcc-ldpdk
+endif
+
 ifeq ($(OPT_DISABLE_UCSIM), 0)
 TARGETS        += sdcc-misc
 SDCC_MISC      += sim/ucsim
Index: configure
===================================================================
--- configure	(revision 10872)
+++ configure	(working copy)
@@ -8825,7 +8825,7 @@
 fi
 
 if test $OPT_DISABLE_PDK14 = 0; then
-  ac_config_files="$ac_config_files src/pdk/Makefile"
+  ac_config_files="$ac_config_files src/pdk/Makefile sdas/aspdk/Makefile"
 
    test $OPT_DISABLE_DEVICE_LIB = 0 && ac_config_files="$ac_config_files device/lib/pdk14/Makefile"
 
@@ -9571,6 +9571,7 @@
     "device/lib/stm8/Makefile") CONFIG_FILES="$CONFIG_FILES device/lib/stm8/Makefile" ;;
     "device/lib/stm8-large/Makefile") CONFIG_FILES="$CONFIG_FILES device/lib/stm8-large/Makefile" ;;
     "src/pdk/Makefile") CONFIG_FILES="$CONFIG_FILES src/pdk/Makefile" ;;
+    "sdas/aspdk/Makefile") CONFIG_FILES="$CONFIG_FILES sdas/aspdk/Makefile" ;;
     "device/lib/pdk14/Makefile") CONFIG_FILES="$CONFIG_FILES device/lib/pdk14/Makefile" ;;
     "device/lib/Makefile") CONFIG_FILES="$CONFIG_FILES device/lib/Makefile" ;;
     "device/non-free/lib/Makefile") CONFIG_FILES="$CONFIG_FILES device/non-free/lib/Makefile" ;;
Index: configure.ac
===================================================================
--- configure.ac	(revision 10872)
+++ configure.ac	(working copy)
@@ -910,7 +910,8 @@
 fi
 
 if test $OPT_DISABLE_PDK14 = 0; then
-  AC_CONFIG_FILES([src/pdk/Makefile])
+  AC_CONFIG_FILES([src/pdk/Makefile
+                   sdas/aspdk/Makefile])
    test $OPT_DISABLE_DEVICE_LIB = 0 && AC_CONFIG_FILES([device/lib/pdk14/Makefile])
 fi
 
Index: pdk14.patch
===================================================================
--- pdk14.patch	(nonexistent)
+++ pdk14.patch	(working copy)
@@ -0,0 +1,63 @@
+Index: Makefile.common.in
+===================================================================
+--- Makefile.common.in	(revision 10872)
++++ Makefile.common.in	(working copy)
+@@ -57,6 +57,7 @@
+ OPT_DISABLE_TLCS90      = @OPT_DISABLE_TLCS90@
+ OPT_DISABLE_GBZ80       = @OPT_DISABLE_GBZ80@
+ OPT_DISABLE_STM8        = @OPT_DISABLE_STM8@
++OPT_DISABLE_PDK14       = @OPT_DISABLE_PDK14@
+ 
+ OPT_ENABLE_DOC          = @OPT_ENABLE_DOC@
+ 
+Index: Makefile.in
+===================================================================
+--- Makefile.in	(revision 10872)
++++ Makefile.in	(working copy)
+@@ -65,6 +65,11 @@
+ SDCC_LD        += sdcc-ldgb
+ endif
+ 
++ifeq ($(OPT_DISABLE_PDK14), 0)
++SDCC_AS        += sdas/aspdk
++SDCC_LD        += sdcc-ldpdk
++endif
++
+ ifeq ($(OPT_DISABLE_UCSIM), 0)
+ TARGETS        += sdcc-misc
+ SDCC_MISC      += sim/ucsim
+Index: configure
+===================================================================
+--- configure	(revision 10872)
++++ configure	(working copy)
+@@ -8825,7 +8825,7 @@
+ fi
+ 
+ if test $OPT_DISABLE_PDK14 = 0; then
+-  ac_config_files="$ac_config_files src/pdk/Makefile"
++  ac_config_files="$ac_config_files src/pdk/Makefile sdas/aspdk/Makefile"
+ 
+    test $OPT_DISABLE_DEVICE_LIB = 0 && ac_config_files="$ac_config_files device/lib/pdk14/Makefile"
+ 
+@@ -9571,6 +9571,7 @@
+     "device/lib/stm8/Makefile") CONFIG_FILES="$CONFIG_FILES device/lib/stm8/Makefile" ;;
+     "device/lib/stm8-large/Makefile") CONFIG_FILES="$CONFIG_FILES device/lib/stm8-large/Makefile" ;;
+     "src/pdk/Makefile") CONFIG_FILES="$CONFIG_FILES src/pdk/Makefile" ;;
++    "sdas/aspdk/Makefile") CONFIG_FILES="$CONFIG_FILES sdas/aspdk/Makefile" ;;
+     "device/lib/pdk14/Makefile") CONFIG_FILES="$CONFIG_FILES device/lib/pdk14/Makefile" ;;
+     "device/lib/Makefile") CONFIG_FILES="$CONFIG_FILES device/lib/Makefile" ;;
+     "device/non-free/lib/Makefile") CONFIG_FILES="$CONFIG_FILES device/non-free/lib/Makefile" ;;
+Index: configure.ac
+===================================================================
+--- configure.ac	(revision 10872)
++++ configure.ac	(working copy)
+@@ -910,7 +910,8 @@
+ fi
+ 
+ if test $OPT_DISABLE_PDK14 = 0; then
+-  AC_CONFIG_FILES([src/pdk/Makefile])
++  AC_CONFIG_FILES([src/pdk/Makefile
++                   sdas/aspdk/Makefile])
+    test $OPT_DISABLE_DEVICE_LIB = 0 && AC_CONFIG_FILES([device/lib/pdk14/Makefile])
+ fi
+ 
Index: sdas/aspdk/Makefile.in
===================================================================
--- sdas/aspdk/Makefile.in	(nonexistent)
+++ sdas/aspdk/Makefile.in	(working copy)
@@ -0,0 +1,137 @@
+#
+#
+#
+
+VERSION         = @VERSION@
+VERSIONHI       = @VERSIONHI@
+VERSIONLO       = @VERSIONLO@
+VERSIONP        = @VERSIONP@
+
+SHELL           = /bin/sh
+CC              = @CC@
+CPP             = @CPP@
+INSTALL         = @INSTALL@
+STRIP           = @STRIP@
+MAKEDEP         = @MAKEDEP@
+
+top_builddir    = @top_builddir@
+top_srcdir      = @top_srcdir@
+
+srcdir          = @srcdir@
+prefix          = @prefix@
+exec_prefix     = @exec_prefix@
+bindir          = @bindir@
+libdir          = @libdir@
+datadir         = @datadir@
+datarootdir     = @datarootdir@
+includedir      = @includedir@
+mandir          = @mandir@
+man1dir         = $(mandir)/man1
+man2dir         = $(mandir)/man2
+infodir         = @info@
+
+EXEEXT          = @EXEEXT@
+
+VPATH           = @srcdir@
+
+CPPFLAGS        = @CPPFLAGS@ -DSDCDB -DNOICE -DINDEXLIB -I. -I$(srcdir) -I$(srcdir)/../asxxsrc -I$(srcdir)/../../support/util
+CFLAGS          = @CFLAGS@ @WALL_FLAG@ $(CPPFLAGS)
+LDFLAGS         = @LDFLAGS@
+LIBS            = -lm
+
+OBJDIR = obj
+
+UTILLIB = $(srcdir)/../../support/util
+UTILSRC = dbuf.c dbuf_string.c
+UTILLIBOBJS = $(UTILSRC:%.c=$(OBJDIR)/%.o)
+
+ASXXLIB = $(srcdir)/../asxxsrc
+ASXXLIBSRC = asdbg.c asdata.c asexpr.c aslex.c aslist.c asmain.c asout.c assubr.c assym.c asmcro.c sdas.c strcmpi.c
+ASXXLIBOBJS = $(ASXXLIBSRC:%.c=$(OBJDIR)/%.o)
+
+SRC = pdkpst.c pdkmch.c pdkadr.c
+OBJS = $(SRC:%.c=$(OBJDIR)/%.o)
+
+ASSOURCES = $(SRC) $(ASXXLIBSRC:%.c=$(ASXXLIB)/%.c) $(UTILSRC:%.c=$(UTILLIB)/%.c)
+
+ASOBJECTS = $(OBJS) $(ASXXLIBOBJS) $(UTILLIBOBJS)
+
+ASX = $(top_builddir)/bin/sdaspdk$(EXEEXT)
+#DEST = $(DESTDIR)$(bindir)/sdaspdk$(EXEEXT)
+DEST = sdaspdk
+DESTPATH = $(DESTDIR)$(bindir)/
+
+transform       = @program_transform_name@
+
+# Compiling entire program or any subproject
+# ------------------------------------------
+all: checkconf $(ASX)
+
+$(ASX): $(ASOBJECTS)
+	$(CC) $(CFLAGS) $(LDFLAGS) -o $@ $(ASOBJECTS) $(LIBS)
+
+# Compiling and installing everything and running test
+# ----------------------------------------------------
+install: all installdirs
+	$(INSTALL) $(ASX) $(DESTPATH)`echo $(DEST)|sed '$(transform)'`$(EXEEXT)
+	$(STRIP) $(DESTPATH)`echo $(DEST)|sed '$(transform)'`$(EXEEXT)
+
+# Deleting all the installed files
+# --------------------------------
+uninstall:
+	rm -f $(DESTPATH)`echo $(DEST)|sed '$(transform)'`$(EXEEXT)
+
+
+# Performing self-test
+# --------------------
+check:
+
+
+# Performing installation test
+# ----------------------------
+installcheck:
+
+
+# Creating installation directories
+# ---------------------------------
+installdirs:
+	$(INSTALL) -d $(DESTDIR)$(bindir)
+
+
+# Creating dependencies
+# ---------------------
+dep: Makefile.dep
+
+Makefile.dep: $(ASSOURCES) $(srcdir)/*.h
+	$(MAKEDEP) $(CPPFLAGS) $(filter %.c,$^) >Makefile.dep
+
+ifeq "$(findstring $(MAKECMDGOALS),uninstall check installcheck installdirs \
+                                   clean distclean mostlyclean realclean)" ""
+  -include Makefile.dep
+endif
+include $(srcdir)/clean.mk
+
+# My rules
+# --------
+$(OBJDIR)/.stamp:
+	mkdir -p $(OBJDIR)
+	touch $(OBJDIR)/.stamp
+
+$(OBJDIR)/%.o: %.c $(OBJDIR)/.stamp
+	$(CC) -c $(CFLAGS) -o $@ $<
+
+$(OBJDIR)/%.o: $(ASXXLIB)/%.c $(OBJDIR)/.stamp
+	$(CC) -c $(CFLAGS) -o $@ $<
+
+$(OBJDIR)/%.o: $(UTILLIB)/%.c $(OBJDIR)/.stamp
+	$(CC) -c $(CFLAGS) -o $@ $<
+
+
+# Remaking configuration
+# ----------------------
+checkconf:
+	@if [ -f $(top_builddir)/devel ]; then\
+          $(MAKE) -f ../conf.mk srcdir="$(srcdir)" top_builddir="$(top_builddir)" freshconf;\
+        fi
+
+# End of Makefile

Property changes on: sdas/aspdk/Makefile.in
___________________________________________________________________
Added: svn:executable
## -0,0 +1 ##
+*
\ No newline at end of property
Index: sdas/aspdk/clean.mk
===================================================================
--- sdas/aspdk/clean.mk	(nonexistent)
+++ sdas/aspdk/clean.mk	(working copy)
@@ -0,0 +1,25 @@
+# Deleting all files created by building the program
+# --------------------------------------------------
+include $(top_builddir)/Makefile.common
+
+clean: mostlyclean
+	rm -f *.dep
+	rm -f $(ASOBJECTS) $(OBJDIR)/.stamp
+	if [ -d $(OBJDIR) ]; then rmdir $(OBJDIR); fi
+
+# Deleting all files created by configuring or building the program
+# -----------------------------------------------------------------
+distclean: clean
+	rm -f Makefile
+
+# Like clean but some files may still exist
+# -----------------------------------------
+mostlyclean:
+	rm -f *core *[%~] *.[oa]
+	rm -f .[a-z]*~
+	rm -f $(top_builddir)/bin/sdaspdk$(EXEEXT)
+
+# Deleting everything that can reconstructed by this Makefile. It deletes
+# everything deleted by distclean plus files created by bison, etc.
+# -----------------------------------------------------------------------
+realclean: distclean

Property changes on: sdas/aspdk/clean.mk
___________________________________________________________________
Added: svn:executable
## -0,0 +1 ##
+*
\ No newline at end of property
Index: sdas/aspdk/pdk.h
===================================================================
--- sdas/aspdk/pdk.h	(nonexistent)
+++ sdas/aspdk/pdk.h	(working copy)
@@ -0,0 +1,133 @@
+/* pdk.h */
+
+/*
+ *  Copyright (C) 1998-2009  Alan R. Baldwin
+ *
+ *  This program is free software: you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation, either version 3 of the License, or
+ *  (at your option) any later version.
+ *
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ *
+ * Alan R. Baldwin
+ * 721 Berkeley St.
+ * Kent, Ohio  44240
+ *
+ *   This Assember Ported by
+ *      John L. Hartman (JLH)
+ *      jhartman at compuserve dot com
+ *      noice at noicedebugger dot com
+ *
+ */
+
+/*)BUILD
+        $(PROGRAM) =    ASPDK
+        $(INCLUDE) = {
+                ASXXXX.H
+                PDK.H
+        }
+        $(FILES) = {
+                I51MCH.C
+                I51ADR.C
+                I51PST.C
+                ASMAIN.C
+                ASDBG.C
+                ASLEX.C
+                ASSYM.C
+                ASSUBR.C
+                ASEXPR.C
+                ASDATA.C
+                ASLIST.C
+                ASOUT.C
+        }
+        $(STACK) = 3000
+*/
+
+/*
+ * Instructions.
+ */
+#define S_MOV     50
+#define S_LDT16   51
+#define S_STT16   52
+#define S_IDXM    53
+#define S_XCH     54
+#define S_PUSHAF  55
+#define S_POPAF   56
+#define S_ADD     57
+#define S_ADDC    58
+#define S_SUB     59
+#define S_SUBC    60
+#define S_INC     61
+#define S_DEC     62
+#define S_CLEAR   63
+#define S_SR      64
+#define S_SRC     65
+#define S_SL      66
+#define S_SLC     67
+#define S_SWAP    68
+#define S_AND     69
+#define S_OR      70
+#define S_XOR     71
+#define S_NOT     72
+#define S_NEG     73
+#define S_SET0    74
+#define S_SET1    75
+#define S_CEQSN   76
+#define S_T0SN    77
+#define S_T1SN    78
+#define S_IZSN    79
+#define S_DZSN    80
+#define S_CALL    81
+#define S_GOTO    82
+#define S_RET     83
+#define S_RETI    84
+#define S_NOP     85
+#define S_PCADD   86
+#define S_ENGINT  87
+#define S_DISGINT 88
+#define S_STOPSYS 89
+#define S_STOPEXE 90
+#define S_RESET   91
+#define S_WDRESET 92
+#define S_SWAPC   93
+#define S_CNEQSN  94 
+
+/*
+ * Addressing modes.
+ */
+#define S_K    31
+#define S_A    32
+#define S_M    33
+#define S_IO   34
+
+       /* machine dependent functions */
+
+#ifdef  OTHERSYSTEM
+        
+        /* pdkaddr.c */
+extern  int             addr(struct expr *esp);
+
+        /* pdkmch.c */
+extern  VOID            machine(struct mne *mp);
+extern  int             mchpcr(struct expr *esp);
+extern  VOID            minit(void);
+
+#else
+
+        /* pdkadr.c */
+extern  int             addr();
+
+        /* pdkmch.c */
+extern  VOID            machine();
+extern  int             mchpcr();
+extern  VOID            minit();
+
+#endif
Index: sdas/aspdk/pdkadr.c
===================================================================
--- sdas/aspdk/pdkadr.c	(nonexistent)
+++ sdas/aspdk/pdkadr.c	(working copy)
@@ -0,0 +1,122 @@
+/* pdkadr.c */
+
+/*
+ *  Copyright (C) 1998-2009  Alan R. Baldwin
+ *
+ *  This program is free software: you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation, either version 3 of the License, or
+ *  (at your option) any later version.
+ *
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ *
+ * Alan R. Baldwin
+ * 721 Berkeley St.
+ * Kent, Ohio  44240
+ *
+ *      This Assember Ported by
+ *      John L. Hartman (JLH)
+ *      jhartman at compuserve dot com
+ *      noice at noicedebugger dot com
+ *
+ */
+
+#include "asxxxx.h"
+#include "pdk.h"
+
+
+/*  Classify argument as to address mode */
+int
+addr(struct expr *esp)
+{
+        int c = getnb(), c1;
+
+        switch (c) {
+        case '#':
+                /* Immediate mode */
+                expr(esp, 0);
+                esp->e_mode = S_K;
+                break;
+
+        case 'o':
+                if ((c1 = getnb()) == 'v') {
+                        /* OV bit of ACC flag */
+                        esp->e_mode = S_K;
+                        esp->e_addr = 3;
+                        break;
+                }
+                unget(c1);
+                goto fallback;
+
+        case 'a':
+                if ((c1 = getnb()) == 'c') {
+                        /* AC bit of ACC flag */
+                        esp->e_mode = S_K;
+                        esp->e_addr = 2;
+                        break;
+                }
+                unget(c1);
+
+                /* Accumulator */
+                esp->e_mode = S_A;
+                break;
+
+        case 's':
+                if ((c1 = getnb()) == 'p') {
+                        /* Stack (SP) */
+                        esp->e_mode = S_IO;
+                        esp->e_addr = 2;
+                        break;
+                }
+                unget(c1);
+                goto fallback;
+
+        case 'c':
+                /* C bit of ACC flag */
+                esp->e_mode = S_K;
+                esp->e_addr = 1;
+                break;
+
+        case 'z':
+                /* Z bit of ACC flag */
+                esp->e_mode = S_K;
+                esp->e_addr = 0;
+                break;
+
+        case 'p':
+                /* Pseudo-register in memory. */
+                esp->e_mode = S_M;
+
+                /* TODO: There must be a better way to do this. */
+                if ((c1 = getnb()) == '+') {
+                        if ((c = getnb()) != '1') {
+                                unget(c);
+                                unget(c1);
+                                unget('p');
+                                goto fallback;
+                        }
+                        esp->e_addr = 1;
+                } else {
+                        unget(c1);
+                        esp->e_addr = 0;
+                }
+                break;
+
+        default:
+        fallback:
+                unget(c);
+
+                /* Memory address */
+                expr(esp, 0);
+                esp->e_mode = S_M;
+        }
+
+        return (esp->e_mode);
+}
Index: sdas/aspdk/pdkmch.c
===================================================================
--- sdas/aspdk/pdkmch.c	(nonexistent)
+++ sdas/aspdk/pdkmch.c	(working copy)
@@ -0,0 +1,417 @@
+/* pdkmch.c */
+
+/*
+ *  Copyright (C) 1998-2011  Alan R. Baldwin
+ *
+ *  This program is free software: you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation, either version 3 of the License, or
+ *  (at your option) any later version.
+ *
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ *
+ * Alan R. Baldwin
+ * 721 Berkeley St.
+ * Kent, Ohio  44240
+ *
+ *   This Assember Ported by
+ *      John L. Hartman (JLH)
+ *      jhartman at compuserve dot com
+ *      noice at noicedebugger dot com
+ *
+ *  Benny Kim (2011/07/21)
+ *  bennykim at coreriver dot com
+ *  Fixed bugs in relative address with "."
+ */
+
+#include "asxxxx.h"
+#include "pdk.h"
+
+char    *cpu    = "Padauk 14";
+char    *dsft   = "asm";
+
+/*
+ * Process machine ops.
+ */
+VOID
+machine(struct mne *mp)
+{
+        a_uint op;
+        int t, t1, combine, combine1;
+        struct expr e, e1, e2;
+
+        clrexpr(&e);
+        clrexpr(&e1);
+        clrexpr(&e2);
+
+        op = mp->m_valu;
+        combine = combine1 = 0;
+        switch (mp->m_type) {
+
+        case S_MOV:
+                t = addr(&e);
+                comma(1);
+                t1 = addr(&e1);
+                if (t == S_IO && t1 == S_A) {
+                        op = 0x0180;
+                        op |= e.e_addr & 0x3F;
+                } else
+                if (t == S_A && t1 == S_IO) {
+                        op = 0x01C0;
+                        op |= e1.e_addr & 0x3F;
+                } else
+                if (t == S_M && t1 == S_A) {
+                        op = 0xB80;
+                        op |= e.e_addr & 0x7F;
+                } else
+                if (t == S_A && t1 == S_M) {
+                        op = 0x0F80;
+                        op |= e1.e_addr & 0x7F;
+                } else
+                if (t == S_A && t1 == S_K)
+                        op |= e1.e_addr & 0xFF;
+                else
+                        aerr();
+
+                outaw(op);
+                break;
+
+        case S_IDXM:
+                t = addr(&e);
+                comma(1);
+                t1 = addr(&e1);
+                if (t == S_A && t1 == S_M) {
+                        op |= 1;
+                        op |= e1.e_addr & 0x7F;
+                } else
+                if (t == S_M && t1 == S_A) {
+                        op |= (e.e_addr & 0x7F) << 1;
+                } else
+                        aerr();
+
+                outaw(op);
+                break;
+
+        case S_SUB:
+                combine = 0x80;
+                /* fallthrough */
+        case S_ADD:
+                t = addr(&e);
+                comma(1);
+                t1 = addr(&e1);
+                if (t == S_M && t1 == S_A) {
+                        op = 0x0800 | combine;
+                        op |= e.e_addr & 0x7F;
+                } else
+                if (t == S_A && t1 == S_M) {
+                        op = 0x0C00 | combine;
+                        op |= e1.e_addr & 0x7F;
+                } else
+                if (t == S_A && t1 == S_K) {
+                        op |= e1.e_addr & 0xFF;
+                } else
+                        aerr();
+
+                outaw(op);
+                break;
+
+        case S_SUBC:
+                combine = 0x80;
+                /* fallthrough */
+        case S_ADDC:
+                t = addr(&e);
+                if (comma(0)) {
+                        t1 = addr(&e1);
+                        if (t == S_M && t1 == S_A) {
+                                op = 0x0900 | combine;
+                                op |= e.e_addr & 0x7F;
+                        } else
+                        if (t == S_A && t1 == S_M) {
+                                op = 0x0D00 | combine;
+                                op |= e1.e_addr & 0x7F;
+                        } else
+                                aerr();
+                } else
+                if (t == S_M) {
+                        op = 0x1000 | combine;
+                        op |= e.e_addr & 0x7F;
+                } else
+                if (t == S_A) {
+                        op = 0x0060 + (combine ? 1 : 0);
+                } else
+                        aerr();
+
+                outaw(op);
+                break;
+
+        case S_SLC:
+        case S_SRC:
+        case S_SL:
+        case S_SR:
+                if (mp->m_type == S_SRC || mp->m_type == S_SLC)
+                        combine = 6;
+                if (mp->m_type == S_SL || mp->m_type == S_SLC)
+                        combine1 = 0x80;
+
+                t = addr(&e);
+
+                if (t == S_A) {
+                        op = (0x006A ^ combine) + (combine1 ? 1 : 0);
+                } else
+                if (t == S_M) {
+                        op = (0x1500 ^ combine) | combine1;
+                        op |= e.e_addr & 0x7F;
+                } else
+                        aerr();
+
+                outaw(op);
+                break;
+
+        case S_OR:
+        case S_XOR:
+        case S_AND:
+                if (mp->m_type == S_OR) {
+                        combine = 0x80;
+                } else
+                if (mp->m_type == S_XOR) {
+                        combine = 0x100;
+                }
+
+                t = addr(&e);
+                comma(1);
+                t1 = addr(&e1);
+                if (t == S_M && t1 == S_A) {
+                        op = 0x0A00 | combine;
+                        op |= e.e_addr & 0x7F;
+                } else
+                if (t == S_A && t1 == S_M) {
+                        op = 0x0E00 | combine;
+                        op |= e1.e_addr & 0x7F;
+                } else
+                if (t == S_A && t1 == S_K) {
+                        op |= e1.e_addr & 0xFF;
+                } else
+                if (t == S_IO && t1 == S_A && mp->m_type == S_XOR) {
+                        op = 0x00C0;
+                        op |= e.e_addr & 0x3F;
+                } else 
+                        aerr();
+
+                outaw(op);
+                break;
+
+        case S_NEG:
+                combine = 0x80;
+                /* fallthrough */
+        case S_NOT:
+                t = addr(&e);
+                if (t == S_M) {
+                        op = 0x1400 | combine;
+                        op |= e.e_addr & 0x7F;
+                } else
+                if (t != S_A)
+                        aerr();
+
+                outaw(op);
+                break;
+
+        case S_SET1:
+                combine = 0x200;
+                /* fallthrough */
+        case S_SET0:
+                t = addr(&e);
+                if (getnb() != '.')
+                        aerr();
+                t1 = addr(&e1);
+                if (t1 != S_K)
+                        aerr();
+
+                if (t == S_IO) {
+                        op = 0x1C00 | combine;
+                        op |= e.e_addr & 0x3F;
+                } else
+                if (t == S_M) {
+                        op = 0x2400 | combine;
+                        op |= e.e_addr & 0x7F;
+                } else
+                        aerr();
+
+                op |= (e1.e_addr & 0x7) << 6;
+                outaw(op);
+                break;
+
+        case S_CNEQSN:
+                combine = 0x80;
+                /* fallthrough */
+        case S_CEQSN:
+                t = addr(&e);
+                if (t != S_A)
+                        aerr();
+
+                comma(1);
+                t1 = addr(&e1);
+                if (t1 == S_M) {
+                        op = 0x1700 | combine;
+                        op |= e1.e_addr & 0x7F;
+                } else
+                if (t1 == S_K) {
+                        op = 0x2A00 | (combine << 1);
+                        op |= e1.e_addr & 0xFF;
+                } else
+                        aerr();
+
+                outaw(op);
+                break;
+
+        case S_T1SN:
+                combine = 0x200;
+                /* fallthrough */
+        case S_T0SN:
+                t = addr(&e);
+                if (getnb() != '.')
+                        aerr();
+                t1 = addr(&e1);
+                if (t1 != S_K)
+                        aerr();
+
+                if (t == S_IO) {
+                        op = 0x1800 | combine;
+                        op |= e.e_addr & 0x3F;
+                } else
+                if (t == S_M) {
+                        op = 0x2000 | combine;
+                        op |= e.e_addr & 0x7F;
+                } else
+                        aerr();
+
+                op |= (e1.e_addr & 0x7) << 6;
+                outaw(op);
+                break;
+
+        case S_DZSN:
+                combine = 0x80;
+                /* fallthrough */
+        case S_IZSN:
+                t = addr(&e);
+                if (t == S_M) {
+                        op = 0x1100 | combine;
+                        op |= e.e_addr & 0x7F;
+                } else
+                if (t != S_A)
+                        aerr();
+
+                outaw(op);
+                break;
+
+        case S_RET:
+                if (more()) {
+                        t = addr(&e);
+                        if (t != S_K)
+                                aerr();
+                        op |= e.e_addr & 0xFF;
+                }
+
+                outaw(op);
+                break;
+
+        case S_INC:
+        case S_DEC:
+        case S_CLEAR:
+                t = addr(&e);
+                if (t != S_M)
+                        aerr();
+                op |= e.e_addr & 0x7F;
+
+                outaw(op);
+                break;
+
+        case S_CALL:
+        case S_GOTO:
+                expr(&e, 0);
+                op |= e.e_addr & 0xFF;
+                outaw(op);
+                break;
+
+        case S_XCH:
+                t = addr(&e);
+                if (t == S_A) {
+                        /* Ignore extra accumulator param. */
+                        comma(1);
+                        t = addr(&e);
+                }
+                if (t != S_M)
+                        aerr();
+
+                op |= e.e_addr & 0x7F;
+                outaw(op);
+                break;
+
+        /* Simple instructions consisting of only one opcode and no args */
+        case S_LDT16:
+        case S_STT16:
+        case S_PUSHAF:
+        case S_POPAF:
+        case S_SWAP:
+        case S_RETI:
+        case S_NOP:
+        case S_PCADD:
+        case S_ENGINT:
+        case S_DISGINT:
+        case S_STOPSYS:
+        case S_STOPEXE:
+        case S_RESET:
+        case S_WDRESET:
+        case S_SWAPC:
+                outaw(op);
+                break;
+        }
+}
+
+/*
+ * Branch/Jump PCR Mode Check
+ */
+int
+mchpcr(struct expr *esp)
+{
+        if (esp->e_base.e_ap == dot.s_area) {
+                return(1);
+        }
+        if (esp->e_flag==0 && esp->e_base.e_ap==NULL) {
+                /*
+                 * Absolute Destination
+                 *
+                 * Use the global symbol '.__.ABS.'
+                 * of value zero and force the assembler
+                 * to use this absolute constant as the
+                 * base value for the relocation.
+                 */
+                esp->e_flag = 1;
+                esp->e_base.e_sp = &sym[1];
+        }
+        return(0);
+}
+
+/*
+ * Machine specific initialization
+ */
+
+VOID
+minit(void)
+{
+        /*
+         * Byte Order
+         */
+        hilo = 0;
+
+        /*
+         * Address Space
+         */
+        exprmasks(3);
+}
Index: sdas/aspdk/pdkpst.c
===================================================================
--- sdas/aspdk/pdkpst.c	(nonexistent)
+++ sdas/aspdk/pdkpst.c	(working copy)
@@ -0,0 +1,190 @@
+/* pdkpst.c */
+
+/*
+ *  Copyright (C) 1998-2009  Alan R. Baldwin
+ *
+ *  This program is free software: you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation, either version 3 of the License, or
+ *  (at your option) any later version.
+ *
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ *
+ * Alan R. Baldwin
+ * 721 Berkeley St.
+ * Kent, Ohio  44240
+ *
+ *   This Assembler Ported by
+ *      John L. Hartman (JLH)
+ *      jhartman at compuserve dot com
+ *      noice at noicedebugger dot com
+ *
+ */
+
+#include "asxxxx.h"
+#include "pdk.h"
+
+/*
+ * Mnemonic Structure
+ */
+struct  mne     mne[] = {
+
+        /* machine */
+
+        /* system */
+
+
+    {   NULL,   "CON",          S_ATYP,         0,      A_CON   },
+    {   NULL,   "OVR",          S_ATYP,         0,      A_OVR   },
+    {   NULL,   "REL",          S_ATYP,         0,      A_REL   },
+    {   NULL,   "ABS",          S_ATYP,         0,      A_ABS   },
+    {   NULL,   "NOPAG",        S_ATYP,         0,      A_NOPAG },
+    {   NULL,   "PAG",          S_ATYP,         0,      A_PAG   },
+
+    {   NULL,   "CODE",         S_ATYP,         0,      A_CODE  },
+    {   NULL,   "DATA",         S_ATYP,         0,      A_DATA  },
+    {   NULL,   "XDATA",        S_ATYP,         0,      A_XDATA },
+    {   NULL,   "BIT",          S_ATYP,         0,      A_BIT   },
+
+    {   NULL,   ".page",        S_PAGE,         0,      0       },
+    {   NULL,   ".title",       S_HEADER,       0,      O_TITLE },
+    {   NULL,   ".sbttl",       S_HEADER,       0,      O_SBTTL },
+    {   NULL,   ".module",      S_MODUL,        0,      0       },
+    {   NULL,   ".include",     S_INCL,         0,      0       },
+    {   NULL,   ".area",        S_AREA,         0,      0       },
+    {   NULL,   ".org",         S_ORG,          0,      0       },
+    {   NULL,   ".radix",       S_RADIX,        0,      0       },
+    {   NULL,   ".globl",       S_GLOBL,        0,      0       },
+    {   NULL,   ".local",       S_LOCAL,        0,      0       },
+    {   NULL,   ".if",          S_CONDITIONAL,  0,      O_IF    },
+    {   NULL,   ".iff",         S_CONDITIONAL,  0,      O_IFF   },
+    {   NULL,   ".ift",         S_CONDITIONAL,  0,      O_IFT   },
+    {   NULL,   ".iftf",        S_CONDITIONAL,  0,      O_IFTF  },
+    {   NULL,   ".ifgt",        S_CONDITIONAL,  0,      O_IFGT  },
+    {   NULL,   ".iflt",        S_CONDITIONAL,  0,      O_IFLT  },
+    {   NULL,   ".ifge",        S_CONDITIONAL,  0,      O_IFGE  },
+    {   NULL,   ".ifle",        S_CONDITIONAL,  0,      O_IFLE  },
+    {   NULL,   ".ifeq",        S_CONDITIONAL,  0,      O_IFEQ  },
+    {   NULL,   ".ifne",        S_CONDITIONAL,  0,      O_IFNE  },
+    {   NULL,   ".iif",         S_CONDITIONAL,  0,      O_IIF   },
+    {   NULL,   ".iiff",        S_CONDITIONAL,  0,      O_IIFF  },
+    {   NULL,   ".iift",        S_CONDITIONAL,  0,      O_IIFT  },
+    {   NULL,   ".iiftf",       S_CONDITIONAL,  0,      O_IIFTF },
+    {   NULL,   ".iifgt",       S_CONDITIONAL,  0,      O_IIFGT },
+    {   NULL,   ".iiflt",       S_CONDITIONAL,  0,      O_IIFLT },
+    {   NULL,   ".iifge",       S_CONDITIONAL,  0,      O_IIFGE },
+    {   NULL,   ".iifle",       S_CONDITIONAL,  0,      O_IIFLE },
+    {   NULL,   ".iifeq",       S_CONDITIONAL,  0,      O_IIFEQ },
+    {   NULL,   ".iifne",       S_CONDITIONAL,  0,      O_IIFNE },
+    {   NULL,   ".else",        S_CONDITIONAL,  0,      O_ELSE  },
+    {   NULL,   ".endif",       S_CONDITIONAL,  0,      O_ENDIF },
+    {   NULL,   ".list",        S_LISTING,      0,      O_LIST  },
+    {   NULL,   ".nlist",       S_LISTING,      0,      O_NLIST },
+    {   NULL,   ".equ",         S_EQU,          0,      O_EQU   },
+    {   NULL,   ".gblequ",      S_EQU,          0,      O_GBLEQU},
+    {   NULL,   ".lclequ",      S_EQU,          0,      O_LCLEQU},
+/* sdas specific */
+    {   NULL,   ".optsdcc",     S_OPTSDCC,      0,      0       },
+/* end sdas specific */
+    {   NULL,   ".byte",        S_DATA,         0,      O_1BYTE },
+    {   NULL,   ".db",          S_DATA,         0,      O_1BYTE },
+    {   NULL,   ".fcb",         S_DATA,         0,      O_1BYTE },
+    {   NULL,   ".word",        S_DATA,         0,      O_2BYTE },
+    {   NULL,   ".dw",          S_DATA,         0,      O_2BYTE },
+    {   NULL,   ".fdb",         S_DATA,         0,      O_2BYTE },
+/*    { NULL,   ".3byte",       S_DATA,         0,      O_3BYTE },      */
+/*    { NULL,   ".triple",      S_DATA,         0,      O_3BYTE },      */
+/*    { NULL,   ".4byte",       S_DATA,         0,      O_4BYTE },      */
+/*    { NULL,   ".quad",        S_DATA,         0,      O_4BYTE },      */
+    {   NULL,   ".blkb",        S_BLK,          0,      O_1BYTE },
+    {   NULL,   ".ds",          S_BLK,          0,      O_1BYTE },
+    {   NULL,   ".rmb",         S_BLK,          0,      O_1BYTE },
+    {   NULL,   ".rs",          S_BLK,          0,      O_1BYTE },
+    {   NULL,   ".blkw",        S_BLK,          0,      O_2BYTE },
+/*    { NULL,   ".blk3",        S_BLK,          0,      O_3BYTE },      */
+/*    { NULL,   ".blk4",        S_BLK,          0,      O_4BYTE },      */
+    {   NULL,   ".ascii",       S_ASCIX,        0,      O_ASCII },
+    {   NULL,   ".ascis",       S_ASCIX,        0,      O_ASCIS },
+    {   NULL,   ".asciz",       S_ASCIX,        0,      O_ASCIZ },
+    {   NULL,   ".str",         S_ASCIX,        0,      O_ASCII },
+    {   NULL,   ".strs",        S_ASCIX,        0,      O_ASCIS },
+    {   NULL,   ".strz",        S_ASCIX,        0,      O_ASCIZ },
+    {   NULL,   ".fcc",         S_ASCIX,        0,      O_ASCII },
+    {   NULL,   ".even",        S_BOUNDARY,     0,      O_EVEN  },
+    {   NULL,   ".odd",         S_BOUNDARY,     0,      O_ODD   },
+    {   NULL,   ".bndry",       S_BOUNDARY,     0,      O_BNDRY },
+
+        /* Macro Processor */
+
+    {   NULL,   ".macro",       S_MACRO,        0,      O_MACRO },
+    {   NULL,   ".endm",        S_MACRO,        0,      O_ENDM  },
+    {   NULL,   ".mexit",       S_MACRO,        0,      O_MEXIT },
+
+    {   NULL,   ".narg",        S_MACRO,        0,      O_NARG  },
+    {   NULL,   ".nchr",        S_MACRO,        0,      O_NCHR  },
+    {   NULL,   ".ntyp",        S_MACRO,        0,      O_NTYP  },
+
+    {   NULL,   ".irp",         S_MACRO,        0,      O_IRP   },
+    {   NULL,   ".irpc",        S_MACRO,        0,      O_IRPC  },
+    {   NULL,   ".rept",        S_MACRO,        0,      O_REPT  },
+
+    {   NULL,   ".nval",        S_MACRO,        0,      O_NVAL  },
+
+    {   NULL,   ".mdelete",     S_MACRO,        0,      O_MDEL  },
+
+        /* machine */
+
+    {   NULL,   "a",            S_A,            0,      0xFF      },
+
+    {   NULL,   "nop",          S_NOP,          0,      0x0000    },
+    {   NULL,   "ret",          S_RET,          0,      0x007A    },
+    {   NULL,   "reti",         S_RETI,         0,      0x007B    },
+    {   NULL,   "mov",          S_MOV,          0,      0x2F00    },
+    {   NULL,   "ldt16",        S_LDT16,        0,      0x0301    },
+    {   NULL,   "stt16",        S_STT16,        0,      0x0300    },
+    {   NULL,   "idxm",         S_IDXM,         0,      0x0380    },
+    {   NULL,   "xch",          S_XCH,          0,      0x1380    },
+    {   NULL,   "pushaf",       S_PUSHAF,       0,      0x0072    },
+    {   NULL,   "popaf",        S_POPAF,        0,      0x0073    },
+    {   NULL,   "add",          S_ADD,          0,      0x2800    },
+    {   NULL,   "addc",         S_ADDC,         0,      0x0060    },
+    {   NULL,   "sub",          S_SUB,          0,      0x2900    },
+    {   NULL,   "subc",         S_SUBC,         0,      0x0061    },
+    {   NULL,   "inc",          S_INC,          0,      0x1200    },
+    {   NULL,   "dec",          S_DEC,          0,      0x1280    },
+    {   NULL,   "clear",        S_CLEAR,        0,      0x1300    },
+    {   NULL,   "sr",           S_SR,           0,      0x006A    },
+    {   NULL,   "src",          S_SRC,          0,      0x006C    },
+    {   NULL,   "sl",           S_SL,           0,      0x006B    },
+    {   NULL,   "slc",          S_SLC,          0,      0x006D    },
+    {   NULL,   "swap",         S_SWAP,         0,      0x006E    },
+    {   NULL,   "and",          S_AND,          0,      0x2C00    },
+    {   NULL,   "or",           S_OR,           0,      0x2D00    },
+    {   NULL,   "xor",          S_XOR,          0,      0x2E00    },
+    {   NULL,   "not",          S_NOT,          0,      0x0068    },
+    {   NULL,   "neg",          S_NEG,          0,      0x0069    },
+    {   NULL,   "set0",         S_SET0,         0,      0x0000    },
+    {   NULL,   "set1",         S_SET1,         0,      0x0000    },
+    {   NULL,   "ceqsn",        S_CEQSN,        0,      0x0000    },
+    {   NULL,   "t0sn",         S_T0SN,         0,      0x0000    },
+    {   NULL,   "izsn",         S_IZSN,         0,      0x0062    },
+    {   NULL,   "dzsn",         S_DZSN,         0,      0x0063    },
+    {   NULL,   "call",         S_CALL,         0,      0x3800    },
+    {   NULL,   "goto",         S_GOTO,         0,      0x3000    },
+    {   NULL,   "pcadd",        S_PCADD,        0,      0x0067    },
+    {   NULL,   "engint",       S_ENGINT,       0,      0x0078    },
+    {   NULL,   "disgint",      S_DISGINT,      0,      0x0079    },
+    {   NULL,   "stopsys",      S_STOPSYS,      0,      0x0076    },
+    {   NULL,   "stopexe",      S_STOPEXE,      0,      0x0077    },
+    {   NULL,   "reset",        S_RESET,        0,      0x0075    },
+    {   NULL,   "wdreset",      S_WDRESET,      0,      0x0070    },
+    {   NULL,   "swapc",        S_SWAPC,        0,      0x0400    },
+    {   NULL,   "cneqsn",       S_CNEQSN,       S_EOL,  0x0000    }
+};
Index: sdas/linksrc/Makefile.in
===================================================================
--- sdas/linksrc/Makefile.in	(revision 10872)
+++ sdas/linksrc/Makefile.in	(working copy)
@@ -63,7 +63,7 @@
 
 # Compiling entire program or any subproject
 # ------------------------------------------
-all: sdcc-ld8051 sdcc-ldz80 sdcc-ldgb sdcc-ld6808 sdcc-ldstm8
+all: sdcc-ld8051 sdcc-ldz80 sdcc-ldgb sdcc-ld6808 sdcc-ldstm8 sdcc-ldpdk
 
 sdcc-ld8051: checkconf $(ASLINK)
 
@@ -75,7 +75,9 @@
 
 sdcc-ldstm8: checkconf $(top_builddir)/bin/sdldstm8$(EXEEXT)
 
-$(top_builddir)/bin/sdldz80$(EXEEXT) $(top_builddir)/bin/sdldgb$(EXEEXT) $(top_builddir)/bin/sdldstm8$(EXEEXT) $(top_builddir)/bin/sdld6808$(EXEEXT): $(ASLINK)
+sdcc-ldpdk: checkconf $(top_builddir)/bin/sdldpdk$(EXEEXT)
+
+$(top_builddir)/bin/sdldz80$(EXEEXT) $(top_builddir)/bin/sdldgb$(EXEEXT) $(top_builddir)/bin/sdldstm8$(EXEEXT) $(top_builddir)/bin/sdld6808$(EXEEXT) $(top_builddir)/bin/sdldpdk$(EXEEXT): $(ASLINK)
 	cp -p $(ASLINK) $@
 
 $(ASLINK): $(LKOBJECTS)
@@ -103,11 +105,16 @@
 	  $(INSTALL) $(top_builddir)/bin/sdldgb$(EXEEXT) $(DESTDIR)$(bindir)/`echo 'sdldgb' | sed '$(transform)'`$(EXEEXT); \
 	  $(STRIP) $(DESTDIR)$(bindir)/`echo 'sdldgb' | sed '$(transform)'`$(EXEEXT); \
 	fi
+	if [ "`grep pdk $(top_builddir)/ports.build`" = "pdk" ]; \
+	then \
+	  $(INSTALL) $(top_builddir)/bin/sdldpdk$(EXEEXT) $(DESTDIR)$(bindir)/`echo 'sdldpdk' | sed '$(transform)'`$(EXEEXT); \
+	  $(STRIP) $(DESTDIR)$(bindir)/`echo 'sdldpdk' | sed '$(transform)'`$(EXEEXT); \
+	fi
 
 # Deleting all the installed files
 # --------------------------------
 uninstall:
-	for ld in $(top_builddir)/bin/sdld $(top_builddir)/bin/sdldz80 $(top_builddir)/bin/sdldgb $(top_builddir)/bin/sdldstm8 $(top_builddir)/bin/sdld6808; \
+	for ld in $(top_builddir)/bin/sdld $(top_builddir)/bin/sdldz80 $(top_builddir)/bin/sdldgb $(top_builddir)/bin/sdldstm8 $(top_builddir)/bin/sdld6808; $(top_builddir)/bin/sdldpdk; \
 	do \
 	  rm -f $(DESTDIR)$(bindir)/`echo \`basename $$ld\` | sed '$(transform)'`$(EXEEXT); \
 	done
Index: sdas/linksrc/sdld.c
===================================================================
--- sdas/linksrc/sdld.c	(revision 10872)
+++ sdas/linksrc/sdld.c	(working copy)
@@ -75,6 +75,7 @@
     { "8051", TARGET_ID_8051, },
     { "6808", TARGET_ID_6808, },
     { "stm8", TARGET_ID_STM8, },
+    { "pdk",  TARGET_ID_PDK,   },
   };
   int i = NELEM (tgt);
 
Index: sdas/linksrc/sdld.h
===================================================================
--- sdas/linksrc/sdld.h	(revision 10872)
+++ sdas/linksrc/sdld.h	(working copy)
@@ -26,6 +26,7 @@
   TARGET_ID_8051,
   TARGET_ID_6808,
   TARGET_ID_STM8,
+  TARGET_ID_PDK,
 };
 
 void sdld_init (char *path);
@@ -40,5 +41,6 @@
 #define TARGET_IS_8051  (get_sdld_target() == TARGET_ID_8051)
 #define TARGET_IS_6808  (get_sdld_target() == TARGET_ID_6808)
 #define TARGET_IS_STM8  (get_sdld_target() == TARGET_ID_STM8)
+#define TARGET_IS_PDK   (get_sdld_target() == TARGET_ID_PDK)
 
 #endif  /* __SDLD_H */
Index: src/pdk/main.c
===================================================================
--- src/pdk/main.c	(revision 10872)
+++ src/pdk/main.c	(working copy)
@@ -167,13 +167,13 @@
 */
 static const char *_linkCmd[] =
 {
-  "sdldstm8", "-nf", "\"$1\"", NULL
+  "sdldpdk", "-nf", "\"$1\"", NULL
 };
 
 /* $3 is replaced by assembler.debug_opts resp. port->assembler.plain_opts */
 static const char *pdkAsmCmd[] =
 {
-  "sdasstm8", "$l", "$3", "\"$1.asm\"", NULL
+  "sdaspdk", "$l", "$3", "\"$1.asm\"", NULL
 };
 
 static const char *const _libs_pdk14[] = { "pdk14", NULL, };
